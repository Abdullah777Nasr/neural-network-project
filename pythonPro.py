#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.22
#  in conjunction with Tcl version 8.6
#    May 07, 2019 03:03:40 PM CAT  platform: Windows NT

import sys
from numpy import exp, array, random, dot
from tkinter.filedialog import askopenfilename
from Hebb_algorithm import Hebb_Network
from preprocessing import Preprocessing
from mlp import NeuronLayer,NeuralNetwork
import SLP_DeltaRule as S
import numpy as np
import Hebb_weights_matrix_algorithm as HNN

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import pythonPro_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    pythonPro_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    pythonPro_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    filename=None
    x_train=None;y_train=None
    x_test=None;y_test=None
    
    def buttonClick(self) : 
       
        filename = askopenfilename()
        self.filename=filename
        print(filename)# do her
        self.TLabel1.configure(text=filename)
        self.TLabel1['text'] = filename
        splittingData=Preprocessing(filename)
        self.x_train,self.y_train,self.x_test,self.y_test=splittingData.Split()
        
    def Done(self) : 
        if self.TCombobox1.get()=="Hebian":
            x_train=self.x_train
            y_train=self.y_train
        
            x_test=self.x_test
            y_test=self.y_test
        
            ANN=Hebb_Network(x_train.shape)
            Xweights=list()
            Xbiases=list()
            print(self.x_train.shape)
            weight,biase,Xweights,Xbiases=ANN.training_phase(x_train,y_train)
            #print(Xweights)
            self.Listbox2.insert(tk.END,"-----Weight ber Epoch------")
            self.Listbox2.insert(tk.END,Xweights)
            self.Listbox2.insert(tk.END,"-----biase ber Epoch------")
            self.Listbox2.insert(tk.END,Xbiases)
            self.Listbox2.insert(tk.END,"-----Final Weight------")
            self.Listbox2.insert(tk.END,weight)
            self.Listbox2.insert(tk.END,"-----Final Biase-------")
            self.Listbox2.insert(tk.END,biase)
        
            testResult=ANN.testing_phase(x_test,y_test)
           
        
        elif self.TCombobox1.get()=="hebian WM":
            
            x_train=np.matrix([[1,-1,-1,-1],[-1,1,-1,-1],[-1,-1,1,-1],[-1,-1,-1,1]])
            y_train=np.matrix('1,-1,-1;1,-1,1;-1,1,-1;-1,1,1')
            x_test=np.matrix('-1,-1,-1,-1')
            y_test=np.matrix([0,0,0])
           
            Hebb_Net_A_WM = HNN.Hebb_Network_Weights_Matrix(x_train.shape[1],y_train.shape[1])
            Hebb_Net_A_WM.create_weight_matrix(x_train,y_train)
            weight_matrix=Hebb_Net_A_WM.training_phase(x_train,y_train)
        
        
          
            self.Listbox2.delete(0,tk.END)
        
        
            weightList=list(weight_matrix)
            self.Listbox2.insert(tk.END,"Final Weight : ")
            print("Final weight : ",weight_matrix)
        
            for item in weightList :
                self.Listbox2.insert(tk.END,item)
        
            tsetResult=Hebb_Net_A_WM.testing_phase(x_test,y_test)
           
            
        elif self.TCombobox1.get()=="Singlayer perseptron":
            ANNSP=S.SLP(self.x_train.shape[1])
            weight,biase=ANNSP.training_phase(self.x_train,self.y_train)
            
            
            self.Listbox2.delete(0,tk.END)
        
        
            weightList=list(weight)
            self.Listbox2.insert(tk.END,"Final Weight : ")
            print("Final weight : ",weight)
            print("Final buase : ",biase)
        
            for item in weightList :
                self.Listbox2.insert(tk.END,item)
        
            self.Listbox2.insert(tk.END,"-----------------------------------------------")
            self.Listbox2.insert(tk.END,"Final Biase : ")
            self.Listbox2.insert(tk.END,biase)
            testResult2=list()
            testResult2 = ANNSP.testing_phase(self.x_test,self.y_test)
           
            
        else: 
            
            self.Listbox2.delete(0,tk.END)
             #random number generator
            random.seed(1)

            # Create layer 1 (4 neurons, each with 3 inputs)
            layer1 = NeuronLayer(4, 3)

            # Create layer 2 (a single neuron with 4 inputs)
            layer2 = NeuronLayer(1, 4)

            # Combine the layers to create a neural network
            neural_network = NeuralNetwork(layer1, layer2)

            print("Stage 1) Random starting synaptic weights: ")
            XL1,XL2=neural_network.print_weights()
            self.Listbox2.insert(tk.END,"-------------Layers---------------")
            self.Listbox2.insert(tk.END,XL1)
            self.Listbox2.insert(tk.END,XL2)
            
            '''
            # The training set. We have 7 examples, each consisting of 3 input values
            # and 1 output value.
            training_set_inputs = self.x_train
            training_set_outputs =self.y_train.T

            # Train the neural network using the training set.
            # Do it 60,000 times and make small adjustments each time.
            neural_network.train(training_set_inputs, training_set_outputs, 60000) #shapes (654,10) and (3,4) not aligned: 10 (dim 1) != 3 (dim 0)

            print("Stage 2) New synaptic weights after training: ")
            neural_network.print_weights()

             # Test the neural network with a new situation.
            print("Stage 3) Considering a new situation [1, 1, 0] -> ?: ")
            hidden_state, output = neural_network.think(array([1, 1, 0]))
            print(output)
            '''
            
            
        
    
                
     
    def printMatrix(self,weightMatrix):
        self.labelweightMatrix="Final Weight : " ,weightMatrix
        self.depositLabelWeightMatrix = Label(self, text = self.labelweightMatrix)
        self.depositLabelWeightMatrix.grid()
    
    
    
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  
        _fgcolor = '#000000' 
        _compcolor = '#d9d9d9' 
        _ana1color = '#d9d9d9'
        _ana2color = '#ececec' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("600x450+650+150")
        top.title("New Toplevel")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Labelframe1 = tk.LabelFrame(top)
        self.Labelframe1.place(relx=0.017, rely=0.867, relheight=0.122
                , relwidth=0.967)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(foreground="black")
        self.Labelframe1.configure(text='''dataset Location''')
        self.Labelframe1.configure(background="#d9d9d9")
        self.Labelframe1.configure(highlightbackground="#d9d9d9")
        self.Labelframe1.configure(highlightcolor="black")
        self.Labelframe1.configure(width=580)

        self.Button1 = tk.Button(self.Labelframe1)
        self.Button1.place(relx=0.845, rely=0.364, height=24, width=83
                , bordermode='ignore')
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''chose dataset''')
        self.Button1.configure(command=self.buttonClick)

        self.TLabel1 = ttk.Label(self.Labelframe1)
        self.TLabel1.place(relx=0.017, rely=0.364, height=19, width=106
                , bordermode='ignore')
        self.TLabel1.configure(background="#d9d9d9")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(font="TkDefaultFont")
        self.TLabel1.configure(relief="flat")
        self.TLabel1.configure(text='''dataset Location.....''')

        self.Labelframe2 = tk.LabelFrame(top)
        self.Labelframe2.place(relx=0.017, rely=0.022, relheight=0.122
                , relwidth=0.967)
        self.Labelframe2.configure(relief='groove')
        self.Labelframe2.configure(foreground="black")
        self.Labelframe2.configure(text='''Chose Algorithm''')
        self.Labelframe2.configure(background="blue")
        self.Labelframe2.configure(highlightbackground="#d9d9d9")
        self.Labelframe2.configure(highlightcolor="black")
        self.Labelframe2.configure(width=580)


        self.TCombobox1 = ttk.Combobox(self.Labelframe2)
        self.TCombobox1.place(relx=0.300, rely=0.364, relheight=0.382
                , relwidth=0.247, bordermode='ignore')
        self.value_list = ["Hebian","hebian WM","Singlayer perseptron","Multy layer perseptron"]
        self.TCombobox1.configure(values=self.value_list)
        self.TCombobox1.configure(takefocus="")
        #self.TCombobox1.bind('<<ComboboxSelected>>',func=self.select_combobox)

        self.Button2 = tk.Button(self.Labelframe2)
        self.Button2.place(relx=0.897, rely=0.364, height=24, width=39, bordermode='ignore')
        self.Button2.configure(activebackground="#ececec")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#d9d9d9")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''Done''')
        self.Button2.configure(command=self.Done)

        self.Labelframe3 = tk.LabelFrame(top)
        self.Labelframe3.place(relx=0.017, rely=0.222, relheight=0.522
                , relwidth=0.967)
        self.Labelframe3.configure(relief='groove')
        self.Labelframe3.configure(foreground="black")
        self.Labelframe3.configure(text='''Values dashbord''')
        self.Labelframe3.configure(background="blue")
        self.Labelframe3.configure(highlightbackground="#d9d9d9")
        self.Labelframe3.configure(highlightcolor="black")
        self.Labelframe3.configure(width=580)



        self.Labelframe5 = tk.LabelFrame(self.Labelframe3)
        self.Labelframe5.place(relx=0.200, rely=0.120, relheight=0.872
                , relwidth=0.534, bordermode='ignore')
        self.Labelframe5.configure(relief='groove')
        self.Labelframe5.configure(foreground="black")
        self.Labelframe5.configure(text='''Weght And biase''')
        self.Labelframe5.configure(background="blue")
        self.Labelframe5.configure(highlightbackground="#d9d9d9")
        self.Labelframe5.configure(highlightcolor="black")
        self.Labelframe5.configure(width=310)

        #ListBox2 Weght
        self.Listbox2 = ScrolledListBox(self.Labelframe5)
        self.Listbox2.place(relx=0.032, rely=0.098, relheight=0.839, relwidth=0.916, bordermode='ignore')
        self.Listbox2.configure(background="blue")
        self.Listbox2.configure(disabledforeground="#a3a3a3")
        self.Listbox2.configure(font="TkFixedFont")
        self.Listbox2.configure(foreground="#000000")
        self.Listbox2.configure(width=284)
        
        
       


# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





